{"version":3,"sources":["stores/VehicleStore.js","App.js","serviceWorker.js","index.js"],"names":["VehicleStore","giraffes","decorate","observable","vehicleStore","NavTabs","defaultActiveKey","id","eventKey","title","NewVehicle","disabled","withRouter","history","match","console","log","Group","controlId","Label","Control","type","placeholder","as","multiple","rows","About","params","text","onClick","push","observer","src","className","alt","Switch","Route","path","component","exact","render","map","vehicleName","key","Boolean","window","location","hostname","ReactDOM","HashRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAEqBA,E,sCACjBC,SAAW,CAAC,SAAS,WAGzBC,YAASF,EAAa,CAClBC,SAAUE,M,UCKRC,EAAe,IAAIJ,EAEzB,SAASK,IACL,OACI,kBAAC,IAAD,CAAMC,iBAAiB,OAAOC,GAAG,4BAC7B,kBAAC,IAAD,CAAKC,SAAS,OAAOC,MAAM,QACvB,2CAEJ,kBAAC,IAAD,CAAKD,SAAS,UAAUC,MAAM,WAC1B,kBAACC,EAAD,OAEJ,kBAAC,IAAD,CAAKF,SAAS,UAAUC,MAAM,UAAUE,UAAQ,GAC5C,kBAACD,EAAD,QAkChB,IAAMA,EAAaE,aAAW,YAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAGrC,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAER,kBAAC,IAAD,KACI,kBAAC,IAAKG,MAAN,CAAYC,UAAU,6BAClB,kBAAC,IAAKC,MAAN,sBACA,kBAAC,IAAKC,QAAN,CAAcC,KAAK,QAAQC,YAAY,sBAE3C,kBAAC,IAAKL,MAAN,CAAYC,UAAU,8BAClB,kBAAC,IAAKC,MAAN,uBACA,kBAAC,IAAKC,QAAN,CAAcG,GAAG,UACb,qCACA,qCACA,qCACA,qCACA,uCAGR,kBAAC,IAAKN,MAAN,CAAYC,UAAU,8BAClB,kBAAC,IAAKC,MAAN,gCACA,kBAAC,IAAKC,QAAN,CAAcG,GAAG,SAASC,UAAQ,GAC9B,qCACA,qCACA,qCACA,qCACA,uCAGR,kBAAC,IAAKP,MAAN,CAAYC,UAAU,gCAClB,kBAAC,IAAKC,MAAN,yBACA,kBAAC,IAAKC,QAAN,CAAcG,GAAG,WAAWE,KAAK,WAM3CC,EAAQd,aAAW,YAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAGhC,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACL,6BACH,qCAAWA,EAAMa,OAAOC,MACxB,kBAAC,IAAD,CAAQC,QAAS,kBAAMhB,EAAQiB,KAAK,OAApC,mBAIOC,eA1Ef,WACI,OACI,6BACI,mCACI,yBAAKC,IAAI,kCAAkCC,UAAU,OAAOC,IAAI,gBAChE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAM,eAAgBC,UAAWZ,IACxC,kBAACU,EAAA,EAAD,CAAOC,KAAM,SAAUC,UAAWZ,IAClC,kBAACU,EAAA,EAAD,CAAOC,KAAM,cAAeC,UAAW5B,IACvC,kBAAC0B,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAM,IAAKG,OAAQ,kBAAM,yCACtC,kBAACJ,EAAA,EAAD,CAAOI,OAAQ,kBAAM,wCAG7B,mCACI,kBAACnC,EAAD,OAEJ,mCACI,4BACI,kBAAC,IAAD,CAAQwB,QAAS,kBAAMzB,EAAaH,SAAS6B,KAAK,WAAlD,iBACC1B,EAAaH,SAASwC,KAAI,SAACC,EAAaC,GAAd,OACvB,wBAAIA,IAAKA,GAAMD,YCtCnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2D,YCXNkC,IAASR,OAAO,kBAACS,EAAA,EAAD,KAAY,kBAAC,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b91f2dc3.chunk.js","sourcesContent":["import {decorate, observable} from \"mobx\";\r\n\r\nexport default class VehicleStore{\r\n    giraffes = [\"Marius\",\"Melman\"];\r\n}\r\n\r\ndecorate(VehicleStore,{\r\n    giraffes: observable\r\n});","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {observer} from \"mobx-react\";\r\nimport Switch from \"react-router-dom/es/Switch\";\r\nimport Route from \"react-router-dom/es/Route\";\r\nimport {withRouter} from \"react-router\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport VehicleStore from \"./stores/VehicleStore\";\r\nimport './App.css';\r\n\r\nconst vehicleStore = new VehicleStore();\r\n\r\nfunction NavTabs() {\r\n    return (\r\n        <Tabs defaultActiveKey=\"home\" id=\"uncontrolled-tab-example\">\r\n            <Tab eventKey=\"home\" title=\"Home\">\r\n                <h1>Homescreen</h1>\r\n            </Tab>\r\n            <Tab eventKey=\"profile\" title=\"Profile\">\r\n                <NewVehicle/>\r\n            </Tab>\r\n            <Tab eventKey=\"contact\" title=\"Contact\" disabled>\r\n                <NewVehicle/>\r\n            </Tab>\r\n        </Tabs>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <container>\r\n                <img src=\"https://i.imgur.com/bVMYcYR.png\" className=\"Logo\" alt=\"NoFoss Logo\"/>\r\n                <Switch>\r\n                    <Route path={\"/about/:text\"} component={About}/>\r\n                    <Route path={\"/about\"} component={About}/>\r\n                    <Route path={\"/newVehicle\"} component={NewVehicle}/>\r\n                    <Route exact path={\"/\"} render={() => <h1>NoFoss</h1>}/>\r\n                    <Route render={() => <h1>404</h1>}/>\r\n                </Switch>\r\n            </container>\r\n            <container>\r\n                <NavTabs/>\r\n            </container>\r\n            <container>\r\n                <ul>\r\n                    <Button onClick={() => vehicleStore.giraffes.push(\"Elmer\")}>Tilf√∏j bil</Button>\r\n                    {vehicleStore.giraffes.map((vehicleName, key) =>\r\n                        <li key={key}>{vehicleName}</li>\r\n                    )}\r\n                </ul>\r\n            </container>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst NewVehicle = withRouter(({history, match}) => {\r\n    console.log(history);\r\n    console.log(match);\r\n    return (\r\n        <Form>\r\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"name@example.com\"/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                <Form.Label>Example select</Form.Label>\r\n                <Form.Control as=\"select\">\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                <Form.Label>Example multiple select</Form.Label>\r\n                <Form.Control as=\"select\" multiple>\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                <Form.Label>Example textarea</Form.Label>\r\n                <Form.Control as=\"textarea\" rows=\"3\"/>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n});\r\n\r\nconst About = withRouter(({history, match}) => {\r\n    console.log(history);\r\n    console.log(match);\r\n    return <div>\r\n        <h1>About {match.params.text}</h1>\r\n        <Button onClick={() => history.push(\"/\")}>Go to front</Button>\r\n    </div>\r\n});\r\n\r\nexport default observer(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport HashRouter from \"react-router-dom/es/HashRouter\";\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}