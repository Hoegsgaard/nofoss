{"version":3,"sources":["stores/GiraffeStore.js","App.js","serviceWorker.js","index.js"],"names":["GiraffeStore","giraffes","davdu","decorate","observable","giraffeStore","NofossLogo","src","className","alt","onClick","push","About","withRouter","history","match","console","log","params","text","observer","Switch","Route","path","component","exact","render","map","giraffeName","key","Boolean","window","location","hostname","ReactDOM","HashRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAEqBA,E,sCACjBC,SAAW,CAAC,SAAS,U,KACrBC,MAAQ,CAAC,SAGbC,YAASH,EAAa,CAClBC,SAAUG,IACVF,MAAOE,MCAX,IAAMC,EAAe,IAAIL,EAEzB,SAASM,IACL,OACI,6BACA,yBAAKC,IAAI,kCAAkCC,UAAU,OAAOC,IAAI,gBAChE,kBAAC,IAAD,CAAQC,QAAS,kBAAIL,EAAaH,MAAMS,KAAK,WAA7C,oBA8BR,IAAMC,EAAQC,aAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,QAAQC,EAAS,EAATA,MAG/B,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACL,6BAAK,qCAAWA,EAAMG,OAAOC,MAChC,kBAAC,IAAD,CAAQT,QAAS,kBAAII,EAAQH,KAAK,OAAlC,mBAIOS,eAjCf,WACI,OACI,6BACI,mCACI,yBAAKZ,UAAU,OACX,kBAACF,EAAD,MACA,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAM,eAAgBC,UAAWZ,IACxC,kBAACU,EAAA,EAAD,CAAOC,KAAM,SAAUC,UAAWZ,IAClC,kBAACU,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAM,IAAKG,OAAQ,kBAAI,yCACpC,kBAACJ,EAAA,EAAD,CAAOI,OAAQ,kBAAI,yCAI/B,mCACI,4BACKrB,EAAaH,MAAMyB,KAAI,SAACC,EAAYC,GAAb,OACpB,wBAAIA,IAAKA,GAAMD,YCzBnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2D,YCXNmB,IAASR,OAAO,kBAACS,EAAA,EAAD,KAAY,kBAAC,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.321ac64d.chunk.js","sourcesContent":["import {decorate, observable} from \"mobx\";\n\nexport default class GiraffeStore{\n    giraffes = [\"Marius\",\"Melman\"];\n    davdu = [\"Lumi\"];\n}\n\ndecorate(GiraffeStore,{\n    giraffes: observable,\n    davdu: observable\n});","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport Switch from \"react-router-dom/es/Switch\";\nimport Route from \"react-router-dom/es/Route\";\nimport {withRouter} from \"react-router\";\nimport GiraffeStore from \"./stores/GiraffeStore\";\n\nconst giraffeStore = new GiraffeStore();\n\nfunction NofossLogo() {\n    return (\n        <div>\n        <img src=\"https://i.imgur.com/bVMYcYR.png\" className=\"Logo\" alt=\"NoFoss Logo\"/>\n        <Button onClick={()=>giraffeStore.davdu.push(\"Elmer\")}>Tilf√∏j giraf</Button>\n        </div>\n    )\n}\n\nfunction App() {\n    return (\n        <div>\n            <container>\n                <div className=\"App\">\n                    <NofossLogo/>\n                    <Switch>\n                        <Route path={\"/about/:text\"} component={About}/>\n                        <Route path={\"/about\"} component={About}/>\n                        <Route exact path={\"/\"} render={()=><h1>NoFoss</h1>}/>\n                        <Route render={()=><h1>404</h1>}/>\n                    </Switch>\n                </div>\n            </container>\n            <container>\n                <ul>\n                    {giraffeStore.davdu.map((giraffeName,key)=>\n                        <li key={key}>{giraffeName}</li>\n                    )}\n                </ul>\n            </container>\n        </div>\n    );\n}\n\nconst About = withRouter(({history,match})=>{\n    console.log(history);\n    console.log(match);\n    return <div><h1>About {match.params.text}</h1>\n        <Button onClick={()=>history.push(\"/\")}>Go to front</Button>\n    </div>\n});\n\nexport default observer(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport HashRouter from \"react-router-dom/es/HashRouter\";\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}